[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "data-engineering-pipeline"
version = "1.0.0"
description = "Pipeline completo de data engineering con Airflow, ETL y modelado dimensional"
authors = [{name = "Data Engineering Team", email = "data@company.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "pandas>=2.0.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "apache-airflow>=2.7.0",
    "pytest>=7.0.0",
    "pyarrow>=12.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest-cov>=4.0.0",
    "bandit>=1.7.0",
]

docker = [
    "docker>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/company/data-engineering-pipeline"
Repository = "https://github.com/company/data-engineering-pipeline.git"
Issues = "https://github.com/company/data-engineering-pipeline/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["airflow*", "etl*", "modeling*", "sql*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-ignore = ['E203', 'W503']

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=airflow --cov=etl --cov=modeling"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["airflow", "etl", "modeling"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
